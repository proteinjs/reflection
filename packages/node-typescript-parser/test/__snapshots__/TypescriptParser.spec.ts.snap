// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypescriptParser Declaration parsing Classes should parse a non exported class 1`] = `
ClassDeclaration {
  "accessors": Array [],
  "ctor": ConstructorDeclaration {
    "end": 171,
    "name": "NonExportedClass",
    "parameters": Array [
      ParameterDeclaration {
        "end": 166,
        "name": "param1",
        "start": 145,
        "type": "string",
      },
    ],
    "start": 133,
    "variables": Array [],
  },
  "end": 302,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 203,
      "isAbstract": false,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method1",
      "parameters": Array [],
      "start": 177,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 237,
      "isAbstract": false,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method2",
      "parameters": Array [],
      "start": 208,
      "type": "void",
      "variables": Array [],
      "visibility": 1,
    },
    MethodDeclaration {
      "end": 300,
      "isAbstract": false,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method3",
      "parameters": Array [],
      "start": 242,
      "type": "void",
      "variables": Array [
        VariableDeclaration {
          "end": 294,
          "isConst": false,
          "isExported": false,
          "name": "variable",
          "start": 276,
          "type": undefined,
        },
      ],
      "visibility": 0,
    },
  ],
  "name": "NonExportedClass",
  "properties": Array [
    PropertyDeclaration {
      "end": 166,
      "isOptional": false,
      "isStatic": false,
      "name": "param1",
      "start": 145,
      "type": "string",
      "visibility": 2,
    },
  ],
  "start": 104,
}
`;

exports[`TypescriptParser Declaration parsing Classes should parse abstract property accessors 1`] = `
Array [
  GetterDeclaration {
    "end": 977,
    "isAbstract": true,
    "isStatic": false,
    "name": "getOnly",
    "start": 939,
    "type": "string",
    "visibility": 2,
  },
  SetterDeclaration {
    "end": 1022,
    "isAbstract": true,
    "isStatic": false,
    "name": "setOnly",
    "start": 982,
    "type": undefined,
    "visibility": 2,
  },
  GetterDeclaration {
    "end": 1067,
    "isAbstract": true,
    "isStatic": false,
    "name": "getAndSet",
    "start": 1027,
    "type": "string",
    "visibility": 2,
  },
  SetterDeclaration {
    "end": 1117,
    "isAbstract": true,
    "isStatic": false,
    "name": "getAndSet",
    "start": 1072,
    "type": undefined,
    "visibility": 2,
  },
]
`;

exports[`TypescriptParser Declaration parsing Classes should parse an abstract class 1`] = `
ClassDeclaration {
  "accessors": Array [],
  "end": 102,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 55,
      "isAbstract": false,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method1",
      "parameters": Array [],
      "start": 35,
      "type": undefined,
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 100,
      "isAbstract": true,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "abstractMethod",
      "parameters": Array [],
      "start": 61,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "AbstractClass",
  "properties": Array [],
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Classes should parse an exported class 1`] = `
ClassDeclaration {
  "accessors": Array [
    GetterDeclaration {
      "end": 492,
      "isAbstract": false,
      "isStatic": false,
      "name": "property",
      "start": 424,
      "type": "string",
      "visibility": 2,
    },
    SetterDeclaration {
      "end": 572,
      "isAbstract": false,
      "isStatic": false,
      "name": "property",
      "start": 498,
      "type": undefined,
      "visibility": 2,
    },
  ],
  "end": 574,
  "isExported": true,
  "methods": Array [],
  "name": "ExportedClass",
  "properties": Array [
    PropertyDeclaration {
      "end": 363,
      "isOptional": false,
      "isStatic": false,
      "name": "_property",
      "start": 337,
      "type": "string",
      "visibility": 0,
    },
    PropertyDeclaration {
      "end": 394,
      "isOptional": false,
      "isStatic": false,
      "name": "protect",
      "start": 368,
      "type": "string",
      "visibility": 1,
    },
    PropertyDeclaration {
      "end": 418,
      "isOptional": false,
      "isStatic": false,
      "name": "pub",
      "start": 399,
      "type": "string",
      "visibility": 2,
    },
  ],
  "start": 304,
}
`;

exports[`TypescriptParser Declaration parsing Classes should parse object and array destructure pattern in a class constructor 1`] = `
ConstructorDeclaration {
  "end": 1198,
  "name": "ObjAndArrDestruct",
  "parameters": Array [
    ParameterDeclaration {
      "end": 1167,
      "name": "p1",
      "start": 1165,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 1171,
      "name": "p2",
      "start": 1169,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 1183,
      "name": "p3",
      "start": 1181,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 1187,
      "name": "p4",
      "start": 1185,
      "type": undefined,
    },
  ],
  "start": 1151,
  "variables": Array [],
}
`;

exports[`TypescriptParser Declaration parsing Classes should parse object and array destructure pattern in a class method 1`] = `
Array [
  MethodDeclaration {
    "end": 1251,
    "isAbstract": false,
    "isAsync": false,
    "isOptional": false,
    "isStatic": false,
    "name": "objMethod",
    "parameters": Array [
      ObjectBoundParameterDeclaration {
        "end": 1240,
        "endCharacter": "}",
        "parameters": Array [
          ParameterDeclaration {
            "end": 1225,
            "name": "p1",
            "start": 1223,
            "type": undefined,
          },
          ParameterDeclaration {
            "end": 1229,
            "name": "p2",
            "start": 1227,
            "type": undefined,
          },
          ParameterDeclaration {
            "end": 1233,
            "name": "p3",
            "start": 1231,
            "type": undefined,
          },
        ],
        "start": 1221,
        "startCharacter": "{",
      },
    ],
    "start": 1204,
    "type": "void",
    "variables": Array [],
    "visibility": 2,
  },
  MethodDeclaration {
    "end": 1307,
    "isAbstract": false,
    "isAsync": false,
    "isOptional": false,
    "isStatic": false,
    "name": "arrMethod",
    "parameters": Array [
      ArrayBoundParameterDeclaration {
        "end": 1296,
        "endCharacter": "]",
        "parameters": Array [
          ParameterDeclaration {
            "end": 1277,
            "name": "p1",
            "start": 1275,
            "type": undefined,
          },
          ParameterDeclaration {
            "end": 1281,
            "name": "p2",
            "start": 1279,
            "type": undefined,
          },
          ParameterDeclaration {
            "end": 1285,
            "name": "p3",
            "start": 1283,
            "type": undefined,
          },
        ],
        "start": 1274,
        "startCharacter": "[",
      },
    ],
    "start": 1257,
    "type": "void",
    "variables": Array [],
    "visibility": 2,
  },
  MethodDeclaration {
    "end": 1386,
    "isAbstract": false,
    "isAsync": false,
    "isOptional": false,
    "isStatic": false,
    "name": "objAndArrMethod",
    "parameters": Array [
      ArrayBoundParameterDeclaration {
        "end": 1358,
        "endCharacter": "]",
        "parameters": Array [
          ParameterDeclaration {
            "end": 1339,
            "name": "p1",
            "start": 1337,
            "type": undefined,
          },
          ParameterDeclaration {
            "end": 1343,
            "name": "p2",
            "start": 1341,
            "type": undefined,
          },
          ParameterDeclaration {
            "end": 1347,
            "name": "p3",
            "start": 1345,
            "type": undefined,
          },
        ],
        "start": 1336,
        "startCharacter": "[",
      },
      ObjectBoundParameterDeclaration {
        "end": 1375,
        "endCharacter": "}",
        "parameters": Array [
          ParameterDeclaration {
            "end": 1364,
            "name": "p4",
            "start": 1362,
            "type": undefined,
          },
          ParameterDeclaration {
            "end": 1368,
            "name": "p5",
            "start": 1366,
            "type": undefined,
          },
        ],
        "start": 1360,
        "startCharacter": "{",
      },
    ],
    "start": 1313,
    "type": "void",
    "variables": Array [],
    "visibility": 2,
  },
]
`;

exports[`TypescriptParser Declaration parsing Classes should parse optional class properties 1`] = `
Array [
  PropertyDeclaration {
    "end": 1448,
    "isOptional": false,
    "isStatic": false,
    "name": "nonOptional",
    "start": 1421,
    "type": "string",
    "visibility": 2,
  },
  PropertyDeclaration {
    "end": 1498,
    "isOptional": false,
    "isStatic": false,
    "name": "nonOptionalAsWell",
    "start": 1453,
    "type": "string | undefined",
    "visibility": 2,
  },
  PropertyDeclaration {
    "end": 1528,
    "isOptional": true,
    "isStatic": false,
    "name": "optional",
    "start": 1503,
    "type": "string",
    "visibility": 2,
  },
]
`;

exports[`TypescriptParser Declaration parsing Classes should parse property accessors 1`] = `
Array [
  GetterDeclaration {
    "end": 731,
    "isAbstract": false,
    "isStatic": false,
    "name": "getOnly",
    "start": 670,
    "type": "string",
    "visibility": 2,
  },
  SetterDeclaration {
    "end": 775,
    "isAbstract": false,
    "isStatic": false,
    "name": "setOnly",
    "start": 737,
    "type": undefined,
    "visibility": 2,
  },
  GetterDeclaration {
    "end": 838,
    "isAbstract": false,
    "isStatic": false,
    "name": "getAndSet",
    "start": 781,
    "type": "string",
    "visibility": 2,
  },
  SetterDeclaration {
    "end": 888,
    "isAbstract": false,
    "isStatic": false,
    "name": "getAndSet",
    "start": 844,
    "type": undefined,
    "visibility": 2,
  },
]
`;

exports[`TypescriptParser Declaration parsing Classes should parse static class properties and methods 1`] = `
ClassDeclaration {
  "accessors": Array [],
  "end": 1662,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 1621,
      "isAbstract": false,
      "isAsync": false,
      "isOptional": false,
      "isStatic": true,
      "name": "method",
      "parameters": Array [],
      "start": 1589,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 1660,
      "isAbstract": false,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "methodNonStatic",
      "parameters": Array [],
      "start": 1626,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "StaticThings",
  "properties": Array [
    PropertyDeclaration {
      "end": 1584,
      "isOptional": false,
      "isStatic": true,
      "name": "prop",
      "start": 1557,
      "type": "string",
      "visibility": 2,
    },
  ],
  "start": 1532,
}
`;

exports[`TypescriptParser Declaration parsing Enums should parse an enum correctly 1`] = `
EnumDeclaration {
  "end": 58,
  "isExported": false,
  "members": Array [
    "Member1",
    "Member2",
    "Member3",
  ],
  "name": "Enumeration",
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Enums should parse an exported enum correctly 1`] = `
EnumDeclaration {
  "end": 136,
  "isExported": true,
  "members": Array [
    "ConstMember1",
    "ConstMember2",
  ],
  "name": "ConstantEnumeration",
  "start": 60,
}
`;

exports[`TypescriptParser Declaration parsing Functions should parse a function correctly 1`] = `
FunctionDeclaration {
  "end": 84,
  "isAsync": false,
  "isExported": false,
  "name": "function1",
  "parameters": Array [
    ParameterDeclaration {
      "end": 25,
      "name": "param1",
      "start": 19,
      "type": undefined,
    },
  ],
  "start": 0,
  "type": "string",
  "variables": Array [
    VariableDeclaration {
      "end": 61,
      "isConst": false,
      "isExported": false,
      "name": "var1",
      "start": 41,
      "type": undefined,
    },
  ],
}
`;

exports[`TypescriptParser Declaration parsing Functions should parse an exported function correctly 1`] = `
FunctionDeclaration {
  "end": 219,
  "isAsync": false,
  "isExported": true,
  "name": "function2",
  "parameters": Array [
    ParameterDeclaration {
      "end": 126,
      "name": "param1",
      "start": 112,
      "type": "string",
    },
    ObjectBoundParameterDeclaration {
      "end": 152,
      "endCharacter": "}",
      "parameters": Array [
        ParameterDeclaration {
          "end": 139,
          "name": "objParam1",
          "start": 130,
          "type": undefined,
        },
        ParameterDeclaration {
          "end": 150,
          "name": "objParam2",
          "start": 141,
          "type": undefined,
        },
      ],
      "start": 128,
      "startCharacter": "{",
    },
    ArrayBoundParameterDeclaration {
      "end": 176,
      "endCharacter": "]",
      "parameters": Array [
        ParameterDeclaration {
          "end": 164,
          "name": "arrParam1",
          "start": 155,
          "type": undefined,
        },
        ParameterDeclaration {
          "end": 175,
          "name": "arrParam2",
          "start": 166,
          "type": undefined,
        },
      ],
      "start": 154,
      "startCharacter": "[",
    },
  ],
  "start": 86,
  "type": "void",
  "variables": Array [
    VariableDeclaration {
      "end": 217,
      "isConst": true,
      "isExported": false,
      "name": "constVar1",
      "start": 190,
      "type": undefined,
    },
  ],
}
`;

exports[`TypescriptParser Declaration parsing Functions should parse parameters correctly 1`] = `
Array [
  ParameterDeclaration {
    "end": 25,
    "name": "param1",
    "start": 19,
    "type": undefined,
  },
]
`;

exports[`TypescriptParser Declaration parsing Functions should parse parameters correctly 2`] = `
Array [
  ParameterDeclaration {
    "end": 126,
    "name": "param1",
    "start": 112,
    "type": "string",
  },
  ObjectBoundParameterDeclaration {
    "end": 152,
    "endCharacter": "}",
    "parameters": Array [
      ParameterDeclaration {
        "end": 139,
        "name": "objParam1",
        "start": 130,
        "type": undefined,
      },
      ParameterDeclaration {
        "end": 150,
        "name": "objParam2",
        "start": 141,
        "type": undefined,
      },
    ],
    "start": 128,
    "startCharacter": "{",
  },
  ArrayBoundParameterDeclaration {
    "end": 176,
    "endCharacter": "]",
    "parameters": Array [
      ParameterDeclaration {
        "end": 164,
        "name": "arrParam1",
        "start": 155,
        "type": undefined,
      },
      ParameterDeclaration {
        "end": 175,
        "name": "arrParam2",
        "start": 166,
        "type": undefined,
      },
    ],
    "start": 154,
    "startCharacter": "[",
  },
]
`;

exports[`TypescriptParser Declaration parsing Functions should parse variables correctly 1`] = `
Array [
  VariableDeclaration {
    "end": 61,
    "isConst": false,
    "isExported": false,
    "name": "var1",
    "start": 41,
    "type": undefined,
  },
]
`;

exports[`TypescriptParser Declaration parsing Functions should parse variables correctly 2`] = `
Array [
  VariableDeclaration {
    "end": 217,
    "isConst": true,
    "isExported": false,
    "name": "constVar1",
    "start": 190,
    "type": undefined,
  },
]
`;

exports[`TypescriptParser Declaration parsing Interfaces should parse a non exported interface 1`] = `
InterfaceDeclaration {
  "accessors": Array [],
  "end": 130,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 93,
      "isAbstract": true,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method1",
      "parameters": Array [],
      "start": 83,
      "type": undefined,
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 128,
      "isAbstract": true,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method2",
      "parameters": Array [
        ParameterDeclaration {
          "end": 120,
          "name": "param1",
          "start": 106,
          "type": "string",
        },
      ],
      "start": 98,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "NonExportedInterface",
  "properties": Array [
    PropertyDeclaration {
      "end": 55,
      "isOptional": false,
      "isStatic": false,
      "name": "property1",
      "start": 37,
      "type": "string",
      "visibility": 2,
    },
    PropertyDeclaration {
      "end": 78,
      "isOptional": false,
      "isStatic": false,
      "name": "property2",
      "start": 60,
      "type": "number",
      "visibility": 2,
    },
  ],
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Interfaces should parse an exported interface 1`] = `
InterfaceDeclaration {
  "accessors": Array [],
  "end": 286,
  "isExported": true,
  "methods": Array [
    MethodDeclaration {
      "end": 247,
      "isAbstract": true,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method1",
      "parameters": Array [
        ObjectBoundParameterDeclaration {
          "end": 245,
          "endCharacter": "}",
          "parameters": Array [
            ParameterDeclaration {
              "end": 235,
              "name": "param1",
              "start": 229,
              "type": undefined,
            },
            ParameterDeclaration {
              "end": 243,
              "name": "param2",
              "start": 237,
              "type": undefined,
            },
          ],
          "start": 227,
          "startCharacter": "{",
        },
      ],
      "start": 219,
      "type": undefined,
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 284,
      "isAbstract": true,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "method2",
      "parameters": Array [
        ArrayBoundParameterDeclaration {
          "end": 276,
          "endCharacter": "]",
          "parameters": Array [
            ParameterDeclaration {
              "end": 267,
              "name": "param1",
              "start": 261,
              "type": undefined,
            },
            ParameterDeclaration {
              "end": 275,
              "name": "param2",
              "start": 269,
              "type": undefined,
            },
          ],
          "start": 260,
          "startCharacter": "[",
        },
      ],
      "start": 252,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "ExportedInterface",
  "properties": Array [
    PropertyDeclaration {
      "end": 191,
      "isOptional": false,
      "isStatic": false,
      "name": "property1",
      "start": 173,
      "type": "string",
      "visibility": 2,
    },
    PropertyDeclaration {
      "end": 214,
      "isOptional": false,
      "isStatic": false,
      "name": "property2",
      "start": 196,
      "type": "number",
      "visibility": 2,
    },
  ],
  "start": 132,
}
`;

exports[`TypescriptParser Declaration parsing Interfaces should parse optional functions 1`] = `
InterfaceDeclaration {
  "accessors": Array [],
  "end": 714,
  "isExported": false,
  "methods": Array [
    MethodDeclaration {
      "end": 680,
      "isAbstract": true,
      "isAsync": false,
      "isOptional": false,
      "isStatic": false,
      "name": "nonOptionalFunction2",
      "parameters": Array [],
      "start": 651,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
    MethodDeclaration {
      "end": 712,
      "isAbstract": true,
      "isAsync": false,
      "isOptional": true,
      "isStatic": false,
      "name": "optionalFunction3",
      "parameters": Array [],
      "start": 685,
      "type": "void",
      "variables": Array [],
      "visibility": 2,
    },
  ],
  "name": "OptionalFunctionInterface",
  "properties": Array [
    PropertyDeclaration {
      "end": 572,
      "isOptional": false,
      "isStatic": false,
      "name": "nonOptionalFunction1",
      "start": 539,
      "type": "() => void",
      "visibility": 2,
    },
    PropertyDeclaration {
      "end": 610,
      "isOptional": true,
      "isStatic": false,
      "name": "optionalFunction1",
      "start": 577,
      "type": "{ (): void }",
      "visibility": 2,
    },
    PropertyDeclaration {
      "end": 646,
      "isOptional": true,
      "isStatic": false,
      "name": "optionalFunction2",
      "start": 615,
      "type": "() => void",
      "visibility": 2,
    },
  ],
  "start": 497,
}
`;

exports[`TypescriptParser Declaration parsing Interfaces should parse optional properties 1`] = `
Array [
  PropertyDeclaration {
    "end": 422,
    "isOptional": false,
    "isStatic": false,
    "name": "nonOptional",
    "start": 402,
    "type": "string",
    "visibility": 2,
  },
  PropertyDeclaration {
    "end": 470,
    "isOptional": false,
    "isStatic": false,
    "name": "alsoNonOptional",
    "start": 427,
    "type": "string | null | undefined",
    "visibility": 2,
  },
  PropertyDeclaration {
    "end": 493,
    "isOptional": true,
    "isStatic": false,
    "name": "optional",
    "start": 475,
    "type": "string",
    "visibility": 2,
  },
]
`;

exports[`TypescriptParser Declaration parsing Modules should parse a module 1`] = `
Module {
  "declarations": Array [
    FunctionDeclaration {
      "end": 62,
      "isAsync": false,
      "isExported": true,
      "name": "modFunc",
      "parameters": Array [],
      "start": 30,
      "type": "void",
      "variables": Array [],
    },
  ],
  "end": 64,
  "exports": Array [],
  "imports": Array [],
  "name": "Module",
  "resources": Array [],
  "start": 0,
  "usages": Array [],
}
`;

exports[`TypescriptParser Declaration parsing Modules should parse a namespace 1`] = `
Namespace {
  "declarations": Array [
    ClassDeclaration {
      "accessors": Array [],
      "end": 121,
      "isExported": false,
      "methods": Array [],
      "name": "NotExported",
      "properties": Array [],
      "start": 100,
    },
    EnumDeclaration {
      "end": 188,
      "isExported": true,
      "members": Array [
        "MemberA",
        "MemberB",
      ],
      "name": "Exported",
      "start": 127,
    },
  ],
  "end": 190,
  "exports": Array [],
  "imports": Array [],
  "name": "Namespace",
  "resources": Array [],
  "start": 66,
  "usages": Array [
    "Namespace",
    "MemberA",
    "MemberB",
  ],
}
`;

exports[`TypescriptParser Declaration parsing Parameters should generate the correct name for an array 1`] = `"[ p1, p2 ]"`;

exports[`TypescriptParser Declaration parsing Parameters should generate the correct name for an object 1`] = `"{ p1, p2 }"`;

exports[`TypescriptParser Declaration parsing Parameters should generate the correct type for an array 1`] = `"{ string, Type }"`;

exports[`TypescriptParser Declaration parsing Parameters should generate the correct type for an object 1`] = `"{ string, number }"`;

exports[`TypescriptParser Declaration parsing Parameters should parse a normal parameter 1`] = `
ParameterDeclaration {
  "end": 26,
  "name": "p1",
  "start": 16,
  "type": "string",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse a simple array binding pattern 1`] = `
ArrayBoundParameterDeclaration {
  "end": 66,
  "endCharacter": "]",
  "parameters": Array [
    ParameterDeclaration {
      "end": 61,
      "name": "p1",
      "start": 59,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 65,
      "name": "p2",
      "start": 63,
      "type": undefined,
    },
  ],
  "start": 58,
  "startCharacter": "[",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse a simple object binding pattern  1`] = `
ObjectBoundParameterDeclaration {
  "end": 281,
  "endCharacter": "}",
  "parameters": Array [
    ParameterDeclaration {
      "end": 275,
      "name": "p1",
      "start": 273,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 279,
      "name": "p2",
      "start": 277,
      "type": undefined,
    },
  ],
  "start": 271,
  "startCharacter": "{",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse an array with overtyped tuple type 1`] = `
ArrayBoundParameterDeclaration {
  "end": 239,
  "endCharacter": "]",
  "parameters": Array [
    ParameterDeclaration {
      "end": 207,
      "name": "p1",
      "start": 205,
      "type": "string",
    },
    ParameterDeclaration {
      "end": 211,
      "name": "p2",
      "start": 209,
      "type": "number",
    },
  ],
  "start": 204,
  "startCharacter": "[",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse an array with tuple type 1`] = `
ArrayBoundParameterDeclaration {
  "end": 122,
  "endCharacter": "]",
  "parameters": Array [
    ParameterDeclaration {
      "end": 101,
      "name": "p1",
      "start": 99,
      "type": "string",
    },
    ParameterDeclaration {
      "end": 105,
      "name": "p2",
      "start": 103,
      "type": "Type",
    },
  ],
  "start": 98,
  "startCharacter": "[",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse an array with undertyped tuple type 1`] = `
ArrayBoundParameterDeclaration {
  "end": 172,
  "endCharacter": "]",
  "parameters": Array [
    ParameterDeclaration {
      "end": 157,
      "name": "p1",
      "start": 155,
      "type": "string",
    },
    ParameterDeclaration {
      "end": 161,
      "name": "p2",
      "start": 159,
      "type": undefined,
    },
  ],
  "start": 154,
  "startCharacter": "[",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse an object with overtyped type literal 1`] = `
ObjectBoundParameterDeclaration {
  "end": 538,
  "endCharacter": "}",
  "parameters": Array [
    ParameterDeclaration {
      "end": 491,
      "name": "p1",
      "start": 489,
      "type": "string",
    },
    ParameterDeclaration {
      "end": 495,
      "name": "p2",
      "start": 493,
      "type": "number",
    },
  ],
  "start": 487,
  "startCharacter": "{",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse an object with type literal 1`] = `
ObjectBoundParameterDeclaration {
  "end": 397,
  "endCharacter": "}",
  "parameters": Array [
    ParameterDeclaration {
      "end": 365,
      "name": "p1",
      "start": 363,
      "type": "string",
    },
    ParameterDeclaration {
      "end": 369,
      "name": "p2",
      "start": 367,
      "type": "Type",
    },
  ],
  "start": 361,
  "startCharacter": "{",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse an object with type reference 1`] = `
ObjectBoundParameterDeclaration {
  "end": 329,
  "endCharacter": "}",
  "parameters": Array [
    ParameterDeclaration {
      "end": 317,
      "name": "p1",
      "start": 315,
      "type": undefined,
    },
    ParameterDeclaration {
      "end": 321,
      "name": "p2",
      "start": 319,
      "type": undefined,
    },
  ],
  "start": 313,
  "startCharacter": "{",
  "typeReference": "Type",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse an object with undertyped type literal 1`] = `
ObjectBoundParameterDeclaration {
  "end": 455,
  "endCharacter": "}",
  "parameters": Array [
    ParameterDeclaration {
      "end": 433,
      "name": "p1",
      "start": 431,
      "type": "string",
    },
    ParameterDeclaration {
      "end": 437,
      "name": "p2",
      "start": 435,
      "type": undefined,
    },
  ],
  "start": 429,
  "startCharacter": "{",
}
`;

exports[`TypescriptParser Declaration parsing Parameters should parse some mixed parameters (all above) 1`] = `
FunctionDeclaration {
  "end": 654,
  "isAsync": false,
  "isExported": false,
  "name": "mixed",
  "parameters": Array [
    ParameterDeclaration {
      "end": 576,
      "name": "p1",
      "start": 566,
      "type": "string",
    },
    ObjectBoundParameterDeclaration {
      "end": 616,
      "endCharacter": "}",
      "parameters": Array [
        ParameterDeclaration {
          "end": 582,
          "name": "p2",
          "start": 580,
          "type": "string",
        },
        ParameterDeclaration {
          "end": 586,
          "name": "p3",
          "start": 584,
          "type": "number",
        },
      ],
      "start": 578,
      "startCharacter": "{",
    },
    ArrayBoundParameterDeclaration {
      "end": 643,
      "endCharacter": "]",
      "parameters": Array [
        ParameterDeclaration {
          "end": 621,
          "name": "p4",
          "start": 619,
          "type": "Type",
        },
        ParameterDeclaration {
          "end": 625,
          "name": "p5",
          "start": 623,
          "type": "boolean",
        },
      ],
      "start": 618,
      "startCharacter": "[",
    },
  ],
  "start": 551,
  "type": "void",
  "variables": Array [],
}
`;

exports[`TypescriptParser Declaration parsing Type aliases should parse a type alias correctly 1`] = `
TypeAliasDeclaration {
  "end": 16,
  "isExported": false,
  "name": "Alias",
  "start": 0,
}
`;

exports[`TypescriptParser Declaration parsing Type aliases should parse an exported type alias correctly 1`] = `
TypeAliasDeclaration {
  "end": 49,
  "isExported": true,
  "name": "ExportedAlias",
  "start": 18,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse a non exported const 1`] = `
VariableDeclaration {
  "end": 59,
  "isConst": true,
  "isExported": false,
  "name": "NonExportedConst",
  "start": 31,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse a non exported variable 1`] = `
VariableDeclaration {
  "end": 29,
  "isConst": false,
  "isExported": false,
  "name": "NonExportedVariable",
  "start": 0,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported const 1`] = `
VariableDeclaration {
  "end": 128,
  "isConst": true,
  "isExported": true,
  "name": "ExportedConst",
  "start": 96,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported multiline variable 1`] = `
VariableDeclaration {
  "end": 206,
  "isConst": false,
  "isExported": true,
  "name": "MultiLet1",
  "start": 160,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported multiline variable 2`] = `
VariableDeclaration {
  "end": 206,
  "isConst": false,
  "isExported": true,
  "name": "MultiLet2",
  "start": 160,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported scope variable 1`] = `
VariableDeclaration {
  "end": 158,
  "isConst": false,
  "isExported": true,
  "name": "ExportedLet",
  "start": 130,
  "type": undefined,
}
`;

exports[`TypescriptParser Declaration parsing Variables should parse an exported variable 1`] = `
VariableDeclaration {
  "end": 94,
  "isConst": false,
  "isExported": true,
  "name": "ExportedVariable",
  "start": 61,
  "type": undefined,
}
`;

exports[`TypescriptParser Export parsing should parse aliased export named from another file 1`] = `
SymbolSpecifier {
  "alias": "Alias",
  "specifier": "Specifier",
}
`;

exports[`TypescriptParser Export parsing should parse default export 1`] = `
DefaultDeclaration {
  "end": undefined,
  "isExported": true,
  "name": "DefaultExport",
  "resource": File {
    "declarations": Array [
      [Circular],
    ],
    "end": 139,
    "exports": Array [
      AllExport {
        "end": 28,
        "from": "./OtherFile",
        "start": 0,
      },
      NamedExport {
        "end": 90,
        "from": "./AnotherFile",
        "specifiers": Array [
          SymbolSpecifier {
            "alias": undefined,
            "specifier": "Specifier",
          },
          SymbolSpecifier {
            "alias": "Alias",
            "specifier": "Specifier",
          },
        ],
        "start": 30,
      },
      AssignedExport {
        "declarationIdentifier": "Foo",
        "end": 105,
        "resource": [Circular],
        "start": 92,
      },
    ],
    "imports": Array [],
    "resources": Array [],
    "start": 0,
    "usages": Array [
      "Specifier",
      "Alias",
      "Foo",
      "DefaultExport",
    ],
  },
  "start": undefined,
}
`;

exports[`TypescriptParser Export parsing should parse export all from another file 1`] = `
AllExport {
  "end": 28,
  "from": "./OtherFile",
  "start": 0,
}
`;

exports[`TypescriptParser Export parsing should parse export assignment 1`] = `
AssignedExport {
  "declarationIdentifier": "Foo",
  "end": 105,
  "resource": File {
    "declarations": Array [
      DefaultDeclaration {
        "end": undefined,
        "isExported": true,
        "name": "DefaultExport",
        "resource": [Circular],
        "start": undefined,
      },
    ],
    "end": 139,
    "exports": Array [
      AllExport {
        "end": 28,
        "from": "./OtherFile",
        "start": 0,
      },
      NamedExport {
        "end": 90,
        "from": "./AnotherFile",
        "specifiers": Array [
          SymbolSpecifier {
            "alias": undefined,
            "specifier": "Specifier",
          },
          SymbolSpecifier {
            "alias": "Alias",
            "specifier": "Specifier",
          },
        ],
        "start": 30,
      },
      [Circular],
    ],
    "imports": Array [],
    "resources": Array [],
    "start": 0,
    "usages": Array [
      "Specifier",
      "Alias",
      "Foo",
      "DefaultExport",
    ],
  },
  "start": 92,
}
`;

exports[`TypescriptParser Export parsing should parse export named from another file 1`] = `
NamedExport {
  "end": 90,
  "from": "./AnotherFile",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier",
    },
    SymbolSpecifier {
      "alias": "Alias",
      "specifier": "Specifier",
    },
  ],
  "start": 30,
}
`;

exports[`TypescriptParser Import parsing should not parse a wrong default statement 1`] = `
File {
  "declarations": Array [],
  "end": 32,
  "exports": Array [],
  "filePath": "inline.tsx",
  "imports": Array [
    NamedImport {
      "end": 32,
      "libraryName": "myLib",
      "specifiers": Array [
        SymbolSpecifier {
          "alias": undefined,
          "specifier": "default",
        },
      ],
      "start": 0,
    },
  ],
  "resources": Array [],
  "rootPath": "/",
  "start": 0,
  "usages": Array [],
}
`;

exports[`TypescriptParser Import parsing should parse a default import 1`] = `
NamedImport {
  "defaultAlias": "Foobar",
  "end": 332,
  "libraryName": "aFile",
  "specifiers": Array [],
  "start": 305,
}
`;

exports[`TypescriptParser Import parsing should parse a mixed default / named import 1`] = `
NamedImport {
  "defaultAlias": "DefaultAlias",
  "end": 455,
  "libraryName": "namedImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier1",
    },
  ],
  "start": 400,
}
`;

exports[`TypescriptParser Import parsing should parse a multiline import 1`] = `
NamedImport {
  "end": 304,
  "libraryName": "multiLineImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Spec1",
    },
    SymbolSpecifier {
      "alias": "Alias2",
      "specifier": "Spec2",
    },
  ],
  "start": 239,
}
`;

exports[`TypescriptParser Import parsing should parse a named import with a default statement 1`] = `
NamedImport {
  "defaultAlias": "DefaultAlias",
  "end": 399,
  "libraryName": "namedImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier1",
    },
  ],
  "start": 333,
}
`;

exports[`TypescriptParser Import parsing should parse external module import 1`] = `
ExternalModuleImport {
  "alias": "external",
  "end": 238,
  "libraryName": "externalModule",
  "start": 194,
}
`;

exports[`TypescriptParser Import parsing should parse imports 1`] = `
Array [
  StringImport {
    "end": 22,
    "libraryName": "stringImport",
    "start": 0,
  },
  NamedImport {
    "end": 88,
    "libraryName": "namedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier1",
      },
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier2",
      },
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier3",
      },
    ],
    "start": 23,
  },
  NamedImport {
    "end": 147,
    "libraryName": "namedAliasedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": "Alias1",
        "specifier": "Specifier1",
      },
    ],
    "start": 89,
  },
  NamespaceImport {
    "alias": "namespaceImport",
    "end": 193,
    "libraryName": "namespace",
    "start": 148,
  },
  ExternalModuleImport {
    "alias": "external",
    "end": 238,
    "libraryName": "externalModule",
    "start": 194,
  },
  NamedImport {
    "end": 304,
    "libraryName": "multiLineImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Spec1",
      },
      SymbolSpecifier {
        "alias": "Alias2",
        "specifier": "Spec2",
      },
    ],
    "start": 239,
  },
  NamedImport {
    "defaultAlias": "Foobar",
    "end": 332,
    "libraryName": "aFile",
    "specifiers": Array [],
    "start": 305,
  },
  NamedImport {
    "defaultAlias": "DefaultAlias",
    "end": 399,
    "libraryName": "namedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier1",
      },
    ],
    "start": 333,
  },
  NamedImport {
    "defaultAlias": "DefaultAlias",
    "end": 455,
    "libraryName": "namedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": undefined,
        "specifier": "Specifier1",
      },
    ],
    "start": 400,
  },
  NamedImport {
    "defaultAlias": "__DefaultAlias",
    "end": 540,
    "libraryName": "namedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": "__Specifier1",
        "specifier": "Specifier1",
      },
    ],
    "start": 456,
  },
  NamedImport {
    "defaultAlias": "__DefaultAlias",
    "end": 614,
    "libraryName": "namedImport",
    "specifiers": Array [
      SymbolSpecifier {
        "alias": "__Specifier1",
        "specifier": "Specifier1",
      },
    ],
    "start": 541,
  },
  NamespaceImport {
    "alias": "__namespaceImport",
    "end": 662,
    "libraryName": "namespace",
    "start": 615,
  },
]
`;

exports[`TypescriptParser Import parsing should parse named import 1`] = `
NamedImport {
  "end": 88,
  "libraryName": "namedImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier1",
    },
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier2",
    },
    SymbolSpecifier {
      "alias": undefined,
      "specifier": "Specifier3",
    },
  ],
  "start": 23,
}
`;

exports[`TypescriptParser Import parsing should parse named import with aliased specifier 1`] = `
NamedImport {
  "end": 147,
  "libraryName": "namedAliasedImport",
  "specifiers": Array [
    SymbolSpecifier {
      "alias": "Alias1",
      "specifier": "Specifier1",
    },
  ],
  "start": 89,
}
`;

exports[`TypescriptParser Import parsing should parse namespace import 1`] = `
NamespaceImport {
  "alias": "namespaceImport",
  "end": 193,
  "libraryName": "namespace",
  "start": 148,
}
`;

exports[`TypescriptParser Import parsing should parse string import 1`] = `
StringImport {
  "end": 22,
  "libraryName": "stringImport",
  "start": 0,
}
`;

exports[`TypescriptParser JSX parsing should parse a simple javascript react file correctly with "parseFile" 1`] = `
File {
  "declarations": Array [
    ClassDeclaration {
      "accessors": Array [],
      "end": 306,
      "isExported": true,
      "methods": Array [
        MethodDeclaration {
          "end": 304,
          "isAbstract": false,
          "isAsync": false,
          "isOptional": false,
          "isStatic": false,
          "name": "render",
          "parameters": Array [],
          "start": 80,
          "type": undefined,
          "variables": Array [],
          "visibility": undefined,
        },
      ],
      "name": "ES6Class",
      "properties": Array [],
      "start": 52,
    },
    DefaultDeclaration {
      "end": undefined,
      "isExported": true,
      "name": "ES6Class",
      "resource": [Circular],
      "start": undefined,
    },
  ],
  "end": 333,
  "exports": Array [],
  "imports": Array [
    NamedImport {
      "defaultAlias": "React",
      "end": 26,
      "libraryName": "react",
      "specifiers": Array [],
      "start": 0,
    },
    NamedImport {
      "defaultAlias": "$",
      "end": 50,
      "libraryName": "jquery",
      "specifiers": Array [],
      "start": 27,
    },
  ],
  "resources": Array [],
  "start": 0,
  "usages": Array [
    "div",
    "Foobar",
    "AnotherBar",
    "blub",
    "p",
    "sortFunc",
    "ES6Class",
  ],
}
`;

exports[`TypescriptParser JSX parsing should parse a simple javascript react file correctly with "parseFiles" 1`] = `
Array [
  File {
    "declarations": Array [
      ClassDeclaration {
        "accessors": Array [],
        "end": 306,
        "isExported": true,
        "methods": Array [
          MethodDeclaration {
            "end": 304,
            "isAbstract": false,
            "isAsync": false,
            "isOptional": false,
            "isStatic": false,
            "name": "render",
            "parameters": Array [],
            "start": 80,
            "type": undefined,
            "variables": Array [],
            "visibility": undefined,
          },
        ],
        "name": "ES6Class",
        "properties": Array [],
        "start": 52,
      },
      DefaultDeclaration {
        "end": undefined,
        "isExported": true,
        "name": "ES6Class",
        "resource": [Circular],
        "start": undefined,
      },
    ],
    "end": 333,
    "exports": Array [],
    "imports": Array [
      NamedImport {
        "defaultAlias": "React",
        "end": 26,
        "libraryName": "react",
        "specifiers": Array [],
        "start": 0,
      },
      NamedImport {
        "defaultAlias": "$",
        "end": 50,
        "libraryName": "jquery",
        "specifiers": Array [],
        "start": 27,
      },
    ],
    "resources": Array [],
    "start": 0,
    "usages": Array [
      "div",
      "Foobar",
      "AnotherBar",
      "blub",
      "p",
      "sortFunc",
      "ES6Class",
    ],
  },
]
`;

exports[`TypescriptParser JSX parsing should parse a simple javascript react file correctly with "parseSource" 1`] = `
File {
  "declarations": Array [
    ClassDeclaration {
      "accessors": Array [],
      "end": 306,
      "isExported": true,
      "methods": Array [
        MethodDeclaration {
          "end": 304,
          "isAbstract": false,
          "isAsync": false,
          "isOptional": false,
          "isStatic": false,
          "name": "render",
          "parameters": Array [],
          "start": 80,
          "type": undefined,
          "variables": Array [],
          "visibility": undefined,
        },
      ],
      "name": "ES6Class",
      "properties": Array [],
      "start": 52,
    },
    DefaultDeclaration {
      "end": undefined,
      "isExported": true,
      "name": "ES6Class",
      "resource": [Circular],
      "start": undefined,
    },
  ],
  "end": 333,
  "exports": Array [],
  "filePath": "inline.tsx",
  "imports": Array [
    NamedImport {
      "defaultAlias": "React",
      "end": 26,
      "libraryName": "react",
      "specifiers": Array [],
      "start": 0,
    },
    NamedImport {
      "defaultAlias": "$",
      "end": 50,
      "libraryName": "jquery",
      "specifiers": Array [],
      "start": 27,
    },
  ],
  "resources": Array [],
  "rootPath": "/",
  "start": 0,
  "usages": Array [
    "div",
    "Foobar",
    "AnotherBar",
    "blub",
    "p",
    "sortFunc",
    "ES6Class",
  ],
}
`;

exports[`TypescriptParser JavaScript parsing should parse a simple javascript file correctly with "parseFile" 1`] = `
File {
  "declarations": Array [
    ClassDeclaration {
      "accessors": Array [],
      "ctor": ConstructorDeclaration {
        "end": 70,
        "name": "ES6Class",
        "parameters": Array [],
        "start": 53,
        "variables": Array [],
      },
      "end": 95,
      "isExported": true,
      "methods": Array [
        MethodDeclaration {
          "end": 93,
          "isAbstract": false,
          "isAsync": false,
          "isOptional": false,
          "isStatic": false,
          "name": "doSomething",
          "parameters": Array [],
          "start": 76,
          "type": undefined,
          "variables": Array [],
          "visibility": undefined,
        },
      ],
      "name": "ES6Class",
      "properties": Array [],
      "start": 25,
    },
    DefaultDeclaration {
      "end": undefined,
      "isExported": true,
      "name": "ES6Class",
      "resource": [Circular],
      "start": undefined,
    },
  ],
  "end": 122,
  "exports": Array [],
  "imports": Array [
    NamedImport {
      "defaultAlias": "$",
      "end": 23,
      "libraryName": "jquery",
      "specifiers": Array [],
      "start": 0,
    },
  ],
  "resources": Array [],
  "start": 0,
  "usages": Array [
    "ES6Class",
  ],
}
`;

exports[`TypescriptParser JavaScript parsing should parse a simple javascript file correctly with "parseFiles" 1`] = `
Array [
  File {
    "declarations": Array [
      ClassDeclaration {
        "accessors": Array [],
        "ctor": ConstructorDeclaration {
          "end": 70,
          "name": "ES6Class",
          "parameters": Array [],
          "start": 53,
          "variables": Array [],
        },
        "end": 95,
        "isExported": true,
        "methods": Array [
          MethodDeclaration {
            "end": 93,
            "isAbstract": false,
            "isAsync": false,
            "isOptional": false,
            "isStatic": false,
            "name": "doSomething",
            "parameters": Array [],
            "start": 76,
            "type": undefined,
            "variables": Array [],
            "visibility": undefined,
          },
        ],
        "name": "ES6Class",
        "properties": Array [],
        "start": 25,
      },
      DefaultDeclaration {
        "end": undefined,
        "isExported": true,
        "name": "ES6Class",
        "resource": [Circular],
        "start": undefined,
      },
    ],
    "end": 122,
    "exports": Array [],
    "imports": Array [
      NamedImport {
        "defaultAlias": "$",
        "end": 23,
        "libraryName": "jquery",
        "specifiers": Array [],
        "start": 0,
      },
    ],
    "resources": Array [],
    "start": 0,
    "usages": Array [
      "ES6Class",
    ],
  },
]
`;

exports[`TypescriptParser JavaScript parsing should parse a simple javascript file correctly with "parseSource" 1`] = `
File {
  "declarations": Array [
    ClassDeclaration {
      "accessors": Array [],
      "ctor": ConstructorDeclaration {
        "end": 70,
        "name": "ES6Class",
        "parameters": Array [],
        "start": 53,
        "variables": Array [],
      },
      "end": 95,
      "isExported": true,
      "methods": Array [
        MethodDeclaration {
          "end": 93,
          "isAbstract": false,
          "isAsync": false,
          "isOptional": false,
          "isStatic": false,
          "name": "doSomething",
          "parameters": Array [],
          "start": 76,
          "type": undefined,
          "variables": Array [],
          "visibility": undefined,
        },
      ],
      "name": "ES6Class",
      "properties": Array [],
      "start": 25,
    },
    DefaultDeclaration {
      "end": undefined,
      "isExported": true,
      "name": "ES6Class",
      "resource": [Circular],
      "start": undefined,
    },
  ],
  "end": 122,
  "exports": Array [],
  "filePath": "inline.tsx",
  "imports": Array [
    NamedImport {
      "defaultAlias": "$",
      "end": 23,
      "libraryName": "jquery",
      "specifiers": Array [],
      "start": 0,
    },
  ],
  "resources": Array [],
  "rootPath": "/",
  "start": 0,
  "usages": Array [
    "ES6Class",
  ],
}
`;

exports[`TypescriptParser Source parsing should parse a source code string correctly 1`] = `
File {
  "declarations": Array [
    ClassDeclaration {
      "accessors": Array [],
      "end": 40,
      "isExported": false,
      "methods": Array [],
      "name": "Foobar",
      "properties": Array [],
      "start": 25,
    },
    VariableDeclaration {
      "end": 67,
      "isConst": true,
      "isExported": false,
      "name": "bar",
      "start": 42,
      "type": undefined,
    },
  ],
  "end": 67,
  "exports": Array [],
  "filePath": "inline.tsx",
  "imports": Array [
    NamedImport {
      "end": 24,
      "libraryName": "bar",
      "specifiers": Array [
        SymbolSpecifier {
          "alias": undefined,
          "specifier": "foo",
        },
      ],
      "start": 0,
    },
  ],
  "resources": Array [],
  "rootPath": "/",
  "start": 0,
  "usages": Array [
    "bar",
    "Foobar",
  ],
}
`;

exports[`TypescriptParser Specific sources should parse generics in functions in classes correctly 1`] = `
File {
  "declarations": Array [
    ClassDeclaration {
      "accessors": Array [],
      "end": 160,
      "isExported": true,
      "methods": Array [
        MethodDeclaration {
          "end": 142,
          "isAbstract": false,
          "isAsync": false,
          "isOptional": false,
          "isStatic": false,
          "name": "test",
          "parameters": Array [],
          "start": 45,
          "type": undefined,
          "variables": Array [
            VariableDeclaration {
              "end": 120,
              "isConst": false,
              "isExported": false,
              "name": "a",
              "start": 85,
              "type": undefined,
            },
            VariableDeclaration {
              "end": 117,
              "isConst": false,
              "isExported": false,
              "name": "b",
              "start": 104,
              "type": undefined,
            },
          ],
          "visibility": 2,
        },
      ],
      "name": "TestClass",
      "properties": Array [],
      "start": 0,
    },
  ],
  "end": 160,
  "exports": Array [],
  "filePath": "inline.tsx",
  "imports": Array [],
  "resources": Array [],
  "rootPath": "/",
  "start": 0,
  "usages": Array [
    "a",
    "T",
    "b",
  ],
}
`;

exports[`TypescriptParser TSX Usage parsing should parseSource correctly 1`] = `
Array [
  "myComponent",
  "div",
  "complexComp",
  "SingleComp",
  "myFunc",
  "MyFunc",
  "foobarVariable",
  "AnotherComp",
  "key",
  "val",
  "valFunc",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseFile" 1`] = `
Array [
  "containerStyle",
  "overflowX",
  "overflowY",
  "width",
  "height",
  "padding",
  "monsters",
  "id",
  "Monster",
  "encounters",
  "Encounter",
  "characters",
  "PlayerCharacter",
  "alignments",
  "sources",
  "selectedCampaign",
  "Campaign",
  "selectedEncounter",
  "loadMonsters",
  "loadEncounters",
  "saveEncounter",
  "encounter",
  "loadEncounter",
  "deleteEncounter",
  "encounterArchivedChanged",
  "archived",
  "unsavedEdits",
  "manualCharacters",
  "level",
  "count",
  "playerCharacters",
  "monster",
  "showMonster",
  "saveNewEncounter",
  "openLoad",
  "state",
  "AppState",
  "ownProps",
  "Props",
  "Partial",
  "Object",
  "c",
  "undefined",
  "dispatch",
  "Dispatch",
  "e",
  "a",
  "changeEncounterArchived",
  "manualCharCount",
  "MenuItem",
  "value",
  "key",
  "primaryText",
  "manualCharLevel",
  "playerCount",
  "monsterCount",
  "props",
  "EncounterPlanner",
  "next",
  "m",
  "JSX",
  "Element",
  "xp",
  "sum",
  "cur",
  "challengeRatingExperience",
  "adjusted",
  "thresholds",
  "easy",
  "medium",
  "hard",
  "deadly",
  "encounterDifficulty",
  "startCase",
  "k",
  "div",
  "Toolbar",
  "className",
  "ToolbarGroup",
  "firstChild",
  "RaisedButton",
  "label",
  "onClick",
  "primary",
  "lastChild",
  "disabled",
  "secondary",
  "SaveModal",
  "title",
  "text",
  "onClose",
  "result",
  "open",
  "Row",
  "Col",
  "xs",
  "style",
  "marginBottom",
  "h6",
  "b",
  "p",
  "margin",
  "textAlign",
  "Divider",
  "List",
  "sortBy",
  "char",
  "ListItem",
  "leftCheckbox",
  "Checkbox",
  "checked",
  "cloneDeep",
  "found",
  "SelectField",
  "fullWidth",
  "autoWidth",
  "floatingLabelText",
  "onChange",
  "event",
  "index",
  "parseInt",
  "IconButton",
  "marginTop",
  "ActionDelete",
  "FlatButton",
  "fontWeight",
  "fontSize",
  "TextField",
  "type",
  "min",
  "step",
  "tooltip",
  "tooltipPosition",
  "ActionSearch",
  "MonstersOverview",
  "onMonsterSelected",
  "showAdd",
  "encounterPlanner",
  "Drawer",
  "openSecondary",
  "NavigationClose",
  "MonsterCard",
  "docked",
  "onRequestChange",
  "h5",
  "marginLeft",
  "ContentArchive",
  "ContentUnarchive",
  "difficulty",
  "amount",
  "experienceThresholds",
  "multiplier",
  "name",
  "React",
  "State",
  "defaultState",
  "1",
  "connect",
  "mapStateToProps",
  "mapDispatchToProps",
  "StatelessComponent",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseFile" 2`] = `
Array [
  "props",
  "Props",
  "EncounterPlanner",
  "next",
  "monsters",
  "m",
  "count",
  "monster",
  "encounter",
  "Encounter",
  "JSX",
  "Element",
  "xp",
  "sum",
  "cur",
  "challengeRatingExperience",
  "adjusted",
  "thresholds",
  "easy",
  "medium",
  "hard",
  "deadly",
  "encounterDifficulty",
  "startCase",
  "Object",
  "k",
  "div",
  "Toolbar",
  "className",
  "ToolbarGroup",
  "firstChild",
  "RaisedButton",
  "label",
  "onClick",
  "primary",
  "lastChild",
  "disabled",
  "secondary",
  "openLoad",
  "SaveModal",
  "title",
  "text",
  "onClose",
  "result",
  "saveNewEncounter",
  "open",
  "Row",
  "Col",
  "xs",
  "style",
  "containerStyle",
  "marginBottom",
  "h6",
  "b",
  "p",
  "margin",
  "textAlign",
  "Divider",
  "List",
  "sortBy",
  "c",
  "char",
  "key",
  "ListItem",
  "primaryText",
  "leftCheckbox",
  "Checkbox",
  "checked",
  "playerCharacters",
  "cloneDeep",
  "found",
  "SelectField",
  "fullWidth",
  "autoWidth",
  "floatingLabelText",
  "value",
  "onChange",
  "event",
  "index",
  "manualCharacters",
  "parseInt",
  "manualCharCount",
  "unsavedEdits",
  "manualCharLevel",
  "IconButton",
  "marginTop",
  "ActionDelete",
  "FlatButton",
  "level",
  "fontWeight",
  "fontSize",
  "TextField",
  "type",
  "min",
  "step",
  "e",
  "tooltip",
  "tooltipPosition",
  "showMonster",
  "ActionSearch",
  "MonstersOverview",
  "id",
  "onMonsterSelected",
  "showAdd",
  "encounterPlanner",
  "Drawer",
  "width",
  "openSecondary",
  "NavigationClose",
  "MonsterCard",
  "Monster",
  "docked",
  "onRequestChange",
  "h5",
  "marginLeft",
  "ContentArchive",
  "ContentUnarchive",
  "difficulty",
  "amount",
  "experienceThresholds",
  "monsterCount",
  "playerCount",
  "multiplier",
  "name",
  "React",
  "State",
  "defaultState",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseFile" 3`] = `
Array [
  "JSX",
  "Element",
  "chars",
  "sortBy",
  "Object",
  "key",
  "c",
  "alive",
  "dead",
  "Row",
  "Col",
  "xs",
  "h4",
  "Table",
  "onRowSelection",
  "idx",
  "TableHeader",
  "displaySelectAll",
  "adjustForCheckbox",
  "TableRow",
  "TableHeaderColumn",
  "TableBody",
  "displayRowCheckbox",
  "showRowHover",
  "char",
  "style",
  "cursor",
  "TableRowColumn",
  "span",
  "title",
  "colSpan",
  "textAlign",
  "IconButton",
  "onClick",
  "ImageEdit",
  "FloatingActionButton",
  "position",
  "bottom",
  "right",
  "mini",
  "ContentAdd",
  "PlayerCharacter",
  "React",
  "Props",
  "State",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseFiles" 1`] = `
Array [
  "containerStyle",
  "overflowX",
  "overflowY",
  "width",
  "height",
  "padding",
  "monsters",
  "id",
  "Monster",
  "encounters",
  "Encounter",
  "characters",
  "PlayerCharacter",
  "alignments",
  "sources",
  "selectedCampaign",
  "Campaign",
  "selectedEncounter",
  "loadMonsters",
  "loadEncounters",
  "saveEncounter",
  "encounter",
  "loadEncounter",
  "deleteEncounter",
  "encounterArchivedChanged",
  "archived",
  "unsavedEdits",
  "manualCharacters",
  "level",
  "count",
  "playerCharacters",
  "monster",
  "showMonster",
  "saveNewEncounter",
  "openLoad",
  "state",
  "AppState",
  "ownProps",
  "Props",
  "Partial",
  "Object",
  "c",
  "undefined",
  "dispatch",
  "Dispatch",
  "e",
  "a",
  "changeEncounterArchived",
  "manualCharCount",
  "MenuItem",
  "value",
  "key",
  "primaryText",
  "manualCharLevel",
  "playerCount",
  "monsterCount",
  "props",
  "EncounterPlanner",
  "next",
  "m",
  "JSX",
  "Element",
  "xp",
  "sum",
  "cur",
  "challengeRatingExperience",
  "adjusted",
  "thresholds",
  "easy",
  "medium",
  "hard",
  "deadly",
  "encounterDifficulty",
  "startCase",
  "k",
  "div",
  "Toolbar",
  "className",
  "ToolbarGroup",
  "firstChild",
  "RaisedButton",
  "label",
  "onClick",
  "primary",
  "lastChild",
  "disabled",
  "secondary",
  "SaveModal",
  "title",
  "text",
  "onClose",
  "result",
  "open",
  "Row",
  "Col",
  "xs",
  "style",
  "marginBottom",
  "h6",
  "b",
  "p",
  "margin",
  "textAlign",
  "Divider",
  "List",
  "sortBy",
  "char",
  "ListItem",
  "leftCheckbox",
  "Checkbox",
  "checked",
  "cloneDeep",
  "found",
  "SelectField",
  "fullWidth",
  "autoWidth",
  "floatingLabelText",
  "onChange",
  "event",
  "index",
  "parseInt",
  "IconButton",
  "marginTop",
  "ActionDelete",
  "FlatButton",
  "fontWeight",
  "fontSize",
  "TextField",
  "type",
  "min",
  "step",
  "tooltip",
  "tooltipPosition",
  "ActionSearch",
  "MonstersOverview",
  "onMonsterSelected",
  "showAdd",
  "encounterPlanner",
  "Drawer",
  "openSecondary",
  "NavigationClose",
  "MonsterCard",
  "docked",
  "onRequestChange",
  "h5",
  "marginLeft",
  "ContentArchive",
  "ContentUnarchive",
  "difficulty",
  "amount",
  "experienceThresholds",
  "multiplier",
  "name",
  "React",
  "State",
  "defaultState",
  "1",
  "connect",
  "mapStateToProps",
  "mapDispatchToProps",
  "StatelessComponent",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseFiles" 2`] = `
Array [
  "props",
  "Props",
  "EncounterPlanner",
  "next",
  "monsters",
  "m",
  "count",
  "monster",
  "encounter",
  "Encounter",
  "JSX",
  "Element",
  "xp",
  "sum",
  "cur",
  "challengeRatingExperience",
  "adjusted",
  "thresholds",
  "easy",
  "medium",
  "hard",
  "deadly",
  "encounterDifficulty",
  "startCase",
  "Object",
  "k",
  "div",
  "Toolbar",
  "className",
  "ToolbarGroup",
  "firstChild",
  "RaisedButton",
  "label",
  "onClick",
  "primary",
  "lastChild",
  "disabled",
  "secondary",
  "openLoad",
  "SaveModal",
  "title",
  "text",
  "onClose",
  "result",
  "saveNewEncounter",
  "open",
  "Row",
  "Col",
  "xs",
  "style",
  "containerStyle",
  "marginBottom",
  "h6",
  "b",
  "p",
  "margin",
  "textAlign",
  "Divider",
  "List",
  "sortBy",
  "c",
  "char",
  "key",
  "ListItem",
  "primaryText",
  "leftCheckbox",
  "Checkbox",
  "checked",
  "playerCharacters",
  "cloneDeep",
  "found",
  "SelectField",
  "fullWidth",
  "autoWidth",
  "floatingLabelText",
  "value",
  "onChange",
  "event",
  "index",
  "manualCharacters",
  "parseInt",
  "manualCharCount",
  "unsavedEdits",
  "manualCharLevel",
  "IconButton",
  "marginTop",
  "ActionDelete",
  "FlatButton",
  "level",
  "fontWeight",
  "fontSize",
  "TextField",
  "type",
  "min",
  "step",
  "e",
  "tooltip",
  "tooltipPosition",
  "showMonster",
  "ActionSearch",
  "MonstersOverview",
  "id",
  "onMonsterSelected",
  "showAdd",
  "encounterPlanner",
  "Drawer",
  "width",
  "openSecondary",
  "NavigationClose",
  "MonsterCard",
  "Monster",
  "docked",
  "onRequestChange",
  "h5",
  "marginLeft",
  "ContentArchive",
  "ContentUnarchive",
  "difficulty",
  "amount",
  "experienceThresholds",
  "monsterCount",
  "playerCount",
  "multiplier",
  "name",
  "React",
  "State",
  "defaultState",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseFiles" 3`] = `
Array [
  "JSX",
  "Element",
  "chars",
  "sortBy",
  "Object",
  "key",
  "c",
  "alive",
  "dead",
  "Row",
  "Col",
  "xs",
  "h4",
  "Table",
  "onRowSelection",
  "idx",
  "TableHeader",
  "displaySelectAll",
  "adjustForCheckbox",
  "TableRow",
  "TableHeaderColumn",
  "TableBody",
  "displayRowCheckbox",
  "showRowHover",
  "char",
  "style",
  "cursor",
  "TableRowColumn",
  "span",
  "title",
  "colSpan",
  "textAlign",
  "IconButton",
  "onClick",
  "ImageEdit",
  "FloatingActionButton",
  "position",
  "bottom",
  "right",
  "mini",
  "ContentAdd",
  "PlayerCharacter",
  "React",
  "Props",
  "State",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseSource" 1`] = `
Array [
  "containerStyle",
  "overflowX",
  "overflowY",
  "width",
  "height",
  "padding",
  "monsters",
  "id",
  "Monster",
  "encounters",
  "Encounter",
  "characters",
  "PlayerCharacter",
  "alignments",
  "sources",
  "selectedCampaign",
  "Campaign",
  "selectedEncounter",
  "loadMonsters",
  "loadEncounters",
  "saveEncounter",
  "encounter",
  "loadEncounter",
  "deleteEncounter",
  "encounterArchivedChanged",
  "archived",
  "unsavedEdits",
  "manualCharacters",
  "level",
  "count",
  "playerCharacters",
  "monster",
  "showMonster",
  "saveNewEncounter",
  "openLoad",
  "state",
  "AppState",
  "ownProps",
  "Props",
  "Partial",
  "Object",
  "c",
  "undefined",
  "dispatch",
  "Dispatch",
  "e",
  "a",
  "changeEncounterArchived",
  "manualCharCount",
  "MenuItem",
  "value",
  "key",
  "primaryText",
  "manualCharLevel",
  "playerCount",
  "monsterCount",
  "props",
  "EncounterPlanner",
  "next",
  "m",
  "JSX",
  "Element",
  "xp",
  "sum",
  "cur",
  "challengeRatingExperience",
  "adjusted",
  "thresholds",
  "easy",
  "medium",
  "hard",
  "deadly",
  "encounterDifficulty",
  "startCase",
  "k",
  "div",
  "Toolbar",
  "className",
  "ToolbarGroup",
  "firstChild",
  "RaisedButton",
  "label",
  "onClick",
  "primary",
  "lastChild",
  "disabled",
  "secondary",
  "SaveModal",
  "title",
  "text",
  "onClose",
  "result",
  "open",
  "Row",
  "Col",
  "xs",
  "style",
  "marginBottom",
  "h6",
  "b",
  "p",
  "margin",
  "textAlign",
  "Divider",
  "List",
  "sortBy",
  "char",
  "ListItem",
  "leftCheckbox",
  "Checkbox",
  "checked",
  "cloneDeep",
  "found",
  "SelectField",
  "fullWidth",
  "autoWidth",
  "floatingLabelText",
  "onChange",
  "event",
  "index",
  "parseInt",
  "IconButton",
  "marginTop",
  "ActionDelete",
  "FlatButton",
  "fontWeight",
  "fontSize",
  "TextField",
  "type",
  "min",
  "step",
  "tooltip",
  "tooltipPosition",
  "ActionSearch",
  "MonstersOverview",
  "onMonsterSelected",
  "showAdd",
  "encounterPlanner",
  "Drawer",
  "openSecondary",
  "NavigationClose",
  "MonsterCard",
  "docked",
  "onRequestChange",
  "h5",
  "marginLeft",
  "ContentArchive",
  "ContentUnarchive",
  "difficulty",
  "amount",
  "experienceThresholds",
  "multiplier",
  "name",
  "React",
  "State",
  "defaultState",
  "inline",
  "connect",
  "mapStateToProps",
  "mapDispatchToProps",
  "StatelessComponent",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseSource" 2`] = `
Array [
  "props",
  "Props",
  "EncounterPlanner",
  "next",
  "monsters",
  "m",
  "count",
  "monster",
  "encounter",
  "Encounter",
  "JSX",
  "Element",
  "xp",
  "sum",
  "cur",
  "challengeRatingExperience",
  "adjusted",
  "thresholds",
  "easy",
  "medium",
  "hard",
  "deadly",
  "encounterDifficulty",
  "startCase",
  "Object",
  "k",
  "div",
  "Toolbar",
  "className",
  "ToolbarGroup",
  "firstChild",
  "RaisedButton",
  "label",
  "onClick",
  "primary",
  "lastChild",
  "disabled",
  "secondary",
  "openLoad",
  "SaveModal",
  "title",
  "text",
  "onClose",
  "result",
  "saveNewEncounter",
  "open",
  "Row",
  "Col",
  "xs",
  "style",
  "containerStyle",
  "marginBottom",
  "h6",
  "b",
  "p",
  "margin",
  "textAlign",
  "Divider",
  "List",
  "sortBy",
  "c",
  "char",
  "key",
  "ListItem",
  "primaryText",
  "leftCheckbox",
  "Checkbox",
  "checked",
  "playerCharacters",
  "cloneDeep",
  "found",
  "SelectField",
  "fullWidth",
  "autoWidth",
  "floatingLabelText",
  "value",
  "onChange",
  "event",
  "index",
  "manualCharacters",
  "parseInt",
  "manualCharCount",
  "unsavedEdits",
  "manualCharLevel",
  "IconButton",
  "marginTop",
  "ActionDelete",
  "FlatButton",
  "level",
  "fontWeight",
  "fontSize",
  "TextField",
  "type",
  "min",
  "step",
  "e",
  "tooltip",
  "tooltipPosition",
  "showMonster",
  "ActionSearch",
  "MonstersOverview",
  "id",
  "onMonsterSelected",
  "showAdd",
  "encounterPlanner",
  "Drawer",
  "width",
  "openSecondary",
  "NavigationClose",
  "MonsterCard",
  "Monster",
  "docked",
  "onRequestChange",
  "h5",
  "marginLeft",
  "ContentArchive",
  "ContentUnarchive",
  "difficulty",
  "amount",
  "experienceThresholds",
  "monsterCount",
  "playerCount",
  "multiplier",
  "name",
  "React",
  "State",
  "defaultState",
]
`;

exports[`TypescriptParser TSX: Specific cases should parse the correct usages with "parseSource" 3`] = `
Array [
  "JSX",
  "Element",
  "chars",
  "sortBy",
  "Object",
  "key",
  "c",
  "alive",
  "dead",
  "Row",
  "Col",
  "xs",
  "h4",
  "Table",
  "onRowSelection",
  "idx",
  "TableHeader",
  "displaySelectAll",
  "adjustForCheckbox",
  "TableRow",
  "TableHeaderColumn",
  "TableBody",
  "displayRowCheckbox",
  "showRowHover",
  "char",
  "style",
  "cursor",
  "TableRowColumn",
  "span",
  "title",
  "colSpan",
  "textAlign",
  "IconButton",
  "onClick",
  "ImageEdit",
  "FloatingActionButton",
  "position",
  "bottom",
  "right",
  "mini",
  "ContentAdd",
  "PlayerCharacter",
  "React",
  "Props",
  "State",
]
`;
