// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypescriptCodeGenerator should generate multiple imports per line for ExternalModuleImport with single quote 1`] = `"import externalAlias = require(\\"externalModuleLib\\");"`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for NamedImport with single quote 1`] = `"import { spec1, spec2 as alias2 } from \\"namedLib\\";"`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for NamedImport with single quote 2`] = `
"import {
  spec1, spec10, spec11, spec12, spec13, spec14, spec15, spec16, spec17, spec18, spec2, spec3, spec4, spec5, spec6, spec7,
  spec8, spec9,
} from \\"multiLineNamedLib\\";"
`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for NamedImport with single quote 3`] = `"import { } from \\"emptyImport\\";"`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for NamedImport with single quote 4`] = `"import Default from \\"defaultImport\\";"`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for NamedImport with single quote 5`] = `"import Default, { spec1, spec2 as alias2 } from \\"defaultWithNamedImport\\";"`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for NamedImport with single quote 6`] = `
"import Default, {
  spec1, spec10, spec11, spec12, spec13, spec14, spec15, spec16, spec17, spec18, spec2, spec3, spec4, spec5, spec6, spec7,
  spec8, spec9,
} from \\"defaultWithNamedMultilineImport\\";"
`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for NamespaceImport with single quote 1`] = `"import * as namespaceAlias from \\"namespaceLib\\";"`;

exports[`TypescriptCodeGenerator should generate multiple imports per line for StringImport with single quote 1`] = `"import \\"stringLib\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for ExternalModuleImport 1`] = `"import externalAlias = require('externalModuleLib');"`;

exports[`TypescriptCodeGenerator should generate the correct code for ExternalModuleImport with double quote 1`] = `"import externalAlias = require('externalModuleLib');"`;

exports[`TypescriptCodeGenerator should generate the correct code for ExternalModuleImport with double quote 2`] = `"import externalAlias = require(\\"externalModuleLib\\");"`;

exports[`TypescriptCodeGenerator should generate the correct code for ExternalModuleImport with double quote 3`] = `"import externalAlias = require(\\"externalModuleLib\\");"`;

exports[`TypescriptCodeGenerator should generate the correct code for ExternalModuleImport with single quote 1`] = `"import externalAlias = require('externalModuleLib');"`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 1`] = `
"    public get pubGetter(): string {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 2`] = `
"    protected get protGetter(): string {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 3`] = `
"    private get privGetter(): string {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 4`] = `
"    public get pubNoTypeGetter() {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 5`] = `
"    protected get protNoTypeGetter() {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 6`] = `
"    private get privNoTypeGetter() {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 7`] = `"    public abstract get pubAbsGetter(): number;"`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 8`] = `"    protected abstract get protAbsGetter(): number;"`;

exports[`TypescriptCodeGenerator should generate the correct code for GetterDeclaration 9`] = `"    private abstract get privAbsGetter(): number;"`;

exports[`TypescriptCodeGenerator should generate the correct code for MethodDeclaration 1`] = `
"    public myMethod(): void {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for MethodDeclaration 2`] = `
"    public myAbstractMethod(): string {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for MethodDeclaration 3`] = `
"    protected myProtectedMethod(): void {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for MethodDeclaration 4`] = `
"    protected myProtectedAbstractMethod(): string {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for MethodDeclaration 5`] = `
"    private myPrivateMethod(): void {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for MethodDeclaration 6`] = `
"    private myPrivateAbstractMethod(): string {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport 1`] = `"import { spec1, spec2 as alias2 } from 'namedLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport 2`] = `
"import {
    spec1,
    spec10,
    spec11,
    spec12,
    spec13,
    spec14,
    spec15,
    spec16,
    spec17,
    spec18,
    spec2,
    spec3,
    spec4,
    spec5,
    spec6,
    spec7,
    spec8,
    spec9,
} from 'multiLineNamedLib';"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport 3`] = `"import { } from 'emptyImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport 4`] = `"import Default from 'defaultImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport 5`] = `"import Default, { spec1, spec2 as alias2 } from 'defaultWithNamedImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport 6`] = `
"import Default, {
    spec1,
    spec10,
    spec11,
    spec12,
    spec13,
    spec14,
    spec15,
    spec16,
    spec17,
    spec18,
    spec2,
    spec3,
    spec4,
    spec5,
    spec6,
    spec7,
    spec8,
    spec9,
} from 'defaultWithNamedMultilineImport';"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 1`] = `"import { spec1, spec2 as alias2 } from 'namedLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 2`] = `"import { spec1, spec2 as alias2 } from \\"namedLib\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 3`] = `
"import {
  spec1,
  spec2 as alias2,
} from \\"namedLib\\";"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 4`] = `
"import {
    spec1,
    spec10,
    spec11,
    spec12,
    spec13,
    spec14,
    spec15,
    spec16,
    spec17,
    spec18,
    spec2,
    spec3,
    spec4,
    spec5,
    spec6,
    spec7,
    spec8,
    spec9,
} from 'multiLineNamedLib';"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 5`] = `
"import {
  spec1,
  spec10,
  spec11,
  spec12,
  spec13,
  spec14,
  spec15,
  spec16,
  spec17,
  spec18,
  spec2,
  spec3,
  spec4,
  spec5,
  spec6,
  spec7,
  spec8,
  spec9,
} from \\"multiLineNamedLib\\";"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 6`] = `
"import {
  spec1,
  spec10,
  spec11,
  spec12,
  spec13,
  spec14,
  spec15,
  spec16,
  spec17,
  spec18,
  spec2,
  spec3,
  spec4,
  spec5,
  spec6,
  spec7,
  spec8,
  spec9,
} from \\"multiLineNamedLib\\";"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 7`] = `"import { } from 'emptyImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 8`] = `"import { } from \\"emptyImport\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 9`] = `"import { } from \\"emptyImport\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 10`] = `"import Default from 'defaultImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 11`] = `"import Default from \\"defaultImport\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 12`] = `"import Default from \\"defaultImport\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 13`] = `"import Default, { spec1, spec2 as alias2 } from 'defaultWithNamedImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 14`] = `"import Default, { spec1, spec2 as alias2 } from \\"defaultWithNamedImport\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 15`] = `
"import Default, {
  spec1,
  spec2 as alias2,
} from \\"defaultWithNamedImport\\";"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 16`] = `
"import Default, {
    spec1,
    spec10,
    spec11,
    spec12,
    spec13,
    spec14,
    spec15,
    spec16,
    spec17,
    spec18,
    spec2,
    spec3,
    spec4,
    spec5,
    spec6,
    spec7,
    spec8,
    spec9,
} from 'defaultWithNamedMultilineImport';"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 17`] = `
"import Default, {
  spec1,
  spec10,
  spec11,
  spec12,
  spec13,
  spec14,
  spec15,
  spec16,
  spec17,
  spec18,
  spec2,
  spec3,
  spec4,
  spec5,
  spec6,
  spec7,
  spec8,
  spec9,
} from \\"defaultWithNamedMultilineImport\\";"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with double quote 18`] = `
"import Default, {
  spec1,
  spec10,
  spec11,
  spec12,
  spec13,
  spec14,
  spec15,
  spec16,
  spec17,
  spec18,
  spec2,
  spec3,
  spec4,
  spec5,
  spec6,
  spec7,
  spec8,
  spec9,
} from \\"defaultWithNamedMultilineImport\\";"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with single quote 1`] = `"import { spec1, spec2 as alias2 } from 'namedLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with single quote 2`] = `
"import {
    spec1,
    spec10,
    spec11,
    spec12,
    spec13,
    spec14,
    spec15,
    spec16,
    spec17,
    spec18,
    spec2,
    spec3,
    spec4,
    spec5,
    spec6,
    spec7,
    spec8,
    spec9,
} from 'multiLineNamedLib';"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with single quote 3`] = `"import { } from 'emptyImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with single quote 4`] = `"import Default from 'defaultImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with single quote 5`] = `"import Default, { spec1, spec2 as alias2 } from 'defaultWithNamedImport';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamedImport with single quote 6`] = `
"import Default, {
    spec1,
    spec10,
    spec11,
    spec12,
    spec13,
    spec14,
    spec15,
    spec16,
    spec17,
    spec18,
    spec2,
    spec3,
    spec4,
    spec5,
    spec6,
    spec7,
    spec8,
    spec9,
} from 'defaultWithNamedMultilineImport';"
`;

exports[`TypescriptCodeGenerator should generate the correct code for NamespaceImport 1`] = `"import * as namespaceAlias from 'namespaceLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamespaceImport with double quote 1`] = `"import * as namespaceAlias from 'namespaceLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamespaceImport with double quote 2`] = `"import * as namespaceAlias from \\"namespaceLib\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamespaceImport with double quote 3`] = `"import * as namespaceAlias from \\"namespaceLib\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for NamespaceImport with single quote 1`] = `"import * as namespaceAlias from 'namespaceLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for ParameterDeclaration 1`] = `"param"`;

exports[`TypescriptCodeGenerator should generate the correct code for ParameterDeclaration 2`] = `"stringParam: string"`;

exports[`TypescriptCodeGenerator should generate the correct code for PropertyDeclaration 1`] = `
"    public pubProperty: string;
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for PropertyDeclaration 2`] = `
"    protected protProperty: number;
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for PropertyDeclaration 3`] = `
"    private prvProperty: boolean;
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 1`] = `
"    public set pubSetter(value: string) {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 2`] = `
"    protected set protSetter(value: string) {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 3`] = `
"    private set privSetter(value: string) {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 4`] = `
"    public set pubNoTypeSetter(value) {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 5`] = `
"    protected set protNoTypeSetter(value) {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 6`] = `
"    private set privNoTypeSetter(value) {
        throw new Error('Not implemented yet.');
    }
"
`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 7`] = `"    public abstract set pubAbsSetter(value: number);"`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 8`] = `"    protected abstract set protAbsSetter(value: number);"`;

exports[`TypescriptCodeGenerator should generate the correct code for SetterDeclaration 9`] = `"    private abstract set privAbsSetter(value: number);"`;

exports[`TypescriptCodeGenerator should generate the correct code for StringImport 1`] = `"import 'stringLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for StringImport with double quote 1`] = `"import 'stringLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for StringImport with double quote 2`] = `"import \\"stringLib\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for StringImport with double quote 3`] = `"import \\"stringLib\\";"`;

exports[`TypescriptCodeGenerator should generate the correct code for StringImport with single quote 1`] = `"import 'stringLib';"`;

exports[`TypescriptCodeGenerator should generate the correct code for SymbolSpecifier 1`] = `"SymbolSpecifier"`;

exports[`TypescriptCodeGenerator should generate the correct code for SymbolSpecifier 2`] = `"SymbolSpecifier as WithAlias"`;

exports[`TypescriptCodeGenerator should generate the correct code for VariableDeclaration 1`] = `"myVar: string"`;

exports[`TypescriptCodeGenerator should generate the correct code for VariableDeclaration 2`] = `"myConst: string"`;
